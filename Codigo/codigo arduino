//*Codigos base para proyecto semestral 2024-2
#include <LiquidCrystal.h>
#include <Stepper.h>
// Inicializa la pantalla LCD
LiquidCrystal pantallaLCD(12, 11, 5, 4, 3, 2);

// Pines de los botones
const int buttonUp = 10;
const int buttonDown = 9;
const int buttonSelect = 8;

// Variables del menú
const char* menuItems[] = {"1.Cantidad", "2.Tiempo", "3.Servir", "4.Purgar"};
const char* submenuCantidad[] = {"Ingresar", "Atras"};
const int submenuGramosSize = 11; // Desde 0 hasta 1000 en intervalos de 100
int gramsOptions[submenuGramosSize] = {0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000};

int menuSize = sizeof(menuItems) / sizeof(menuItems[0]);
int selectedItem = 0;
bool inSubMenu = false;
bool inGramosMenu = false;
bool inVecesDiaMenu = false;
bool definingIntervalos = false;
int selectedSubItem = 0;

bool ingresandoVeces = false;
bool ingresandoIntervalo = false;
int vecesPorDia = 1;         // Número de veces por día (1-5)
int intervaloMinutos = 0;    // Intervalo en minutos (1-480, en incrementos de 60)
int intervalIndex = 0;

//Otras variables
const int pasosPorRevolucion = 2048;
//Motor
Stepper motorPasoAPaso(pasosPorRevolucion, 13, 7, 6, 44);

void setup() {
  pantallaLCD.begin(16, 2);
  pinMode(buttonUp, INPUT);
  pinMode(buttonDown, INPUT);
  pinMode(buttonSelect, INPUT);

   motorPasoAPaso.setSpeed(7);

  displayMenu();
}

void loop() {
  // Comprueba si se presionan los botones
  if (digitalRead(buttonUp) == HIGH) {
    if (inGramosMenu) {
      selectedSubItem = (selectedSubItem - 1 + submenuGramosSize) % submenuGramosSize; // Mueve hacia arriba en gramos
    } else if (inVecesDiaMenu) {
      vecesPorDia = (vecesPorDia < 5) ? vecesPorDia + 1 : 1;
    } else if (definingIntervalos) {
      intervaloMinutos = (intervaloMinutos < 480) ? intervaloMinutos + 60 : 60;
    } else if (inSubMenu) {
      selectedSubItem = (selectedSubItem - 1 + 2) % 2; // Mueve hacia arriba en submenú
    } else {
      selectedItem = (selectedItem - 1 + menuSize) % menuSize; // Mueve hacia arriba en menú
    }
    displayMenu();
    delay(200); // Anti-rebote
  }

  if (digitalRead(buttonDown) == HIGH) {
    if (inGramosMenu) {
      selectedSubItem = (selectedSubItem + 1) % submenuGramosSize; // Mueve hacia abajo en gramos
    } else if (inVecesDiaMenu) {
      vecesPorDia = (vecesPorDia > 1) ? vecesPorDia - 1 : 5;
    } else if (definingIntervalos) {
      intervaloMinutos = (intervaloMinutos > 60) ? intervaloMinutos - 60 : 480;
    } else if (inSubMenu) {
      selectedSubItem = (selectedSubItem + 1) % 2; // Mueve hacia abajo en submenú
    } else {
      selectedItem = (selectedItem + 1) % menuSize; // Mueve hacia abajo en menú
    }
    displayMenu();
    delay(200); // Anti-rebote
  }

  if (digitalRead(buttonSelect) == HIGH) {
    if (inGramosMenu) {
      processGramosItem();
      inGramosMenu = false; // Regresa al menú principal después de seleccionar gramos
      displayMenu();
    } else if (inVecesDiaMenu) {
      enterIntervalos(); // Ingresa directamente a definir intervalos después de veces/día
      inVecesDiaMenu = false; // Finaliza el ingreso de "Veces"
    } else if (definingIntervalos) {
      finalizeIntervalos(); // Finaliza la selección de intervalos
    } else if (inSubMenu) {
      selectSubMenu1Item();
    } else if (selectedItem == 3) {
      pantallaLCD.clear();
      pantallaLCD.print("Purgando...");
      delay(2000);
      motorPasoAPaso.step(pasosPorRevolucion);
      displayMenu();
    } else {
      if (selectedItem == 0) {
        inSubMenu = true;
      } else if (selectedItem == 1) {
        inVecesDiaMenu = true;
      }
    }
    delay(200); // Anti-rebote
  }
}

void displayMenu() {
  pantallaLCD.clear();
  if (inGramosMenu) {
    pantallaLCD.print("Gramos:");
    pantallaLCD.setCursor(0, 1);
    pantallaLCD.print(gramsOptions[selectedSubItem]);
  } else if (inVecesDiaMenu) {
    pantallaLCD.print("Veces/Dia:");
    pantallaLCD.setCursor(0, 1);
    pantallaLCD.print(vecesPorDia);
  } else if (definingIntervalos) {
    pantallaLCD.print("Intervalo:");
    pantallaLCD.setCursor(0, 1);
    pantallaLCD.print(intervaloMinutos);
  } else if (inSubMenu) {
    pantallaLCD.print(selectedItem == 0 ? "Cantidad" : "Tiempo");
    pantallaLCD.setCursor(0, 1);
    pantallaLCD.print(selectedItem == 0 ? submenuCantidad[selectedSubItem] : "Ingresar");
  } else {
    pantallaLCD.print("Menu:");
    pantallaLCD.setCursor(0, 1);
    pantallaLCD.print(menuItems[selectedItem]);
  }
}

void selectSubMenu1Item() {
  if (selectedItem == 0 && selectedSubItem == 0) { // Si selecciona "Ingresar" en Cantidad
    inGramosMenu = true;
    selectedSubItem = 0; // Reinicia la selección
  } else if (selectedItem == 1 && selectedSubItem == 0) { // Si selecciona "Ingresar" en Tiempo
    inVecesDiaMenu = true;
    selectedSubItem = 0; // Reinicia la selección
  } else {
    pantallaLCD.clear();
    pantallaLCD.print("Seleccionaste:");
    pantallaLCD.setCursor(0, 1);
    pantallaLCD.print(selectedItem == 0 ? submenuCantidad[selectedSubItem] : "Ingresar");
    delay(2000); // Muestra la selección por 2 segundos
    inSubMenu = false; // Regresa al menú principal
    displayMenu();
  }
}

void enterIntervalos() {
  pantallaLCD.clear();
  pantallaLCD.print("Definir int:");
  pantallaLCD.setCursor(0, 1);
  pantallaLCD.print(vecesPorDia - 1); // Máximo intervalos: vecesDia - 1
  definingIntervalos = true; // Entra al menú de definir intervalos
  intervalIndex = 0; // Reinicia el índice
}

void finalizeIntervalos() {
  pantallaLCD.clear();
  pantallaLCD.print("Intervalo:");
  pantallaLCD.setCursor(0, 1);
  pantallaLCD.print(intervaloMinutos);
  delay(1000);
  definingIntervalos = false; // Sale del menú de definir intervalos
  displayMenu();
}

void processGramosItem() {
  pantallaLCD.clear();
  pantallaLCD.print("En proceso...");
  delay(1000); // Simula un proceso
  pantallaLCD.clear();
  pantallaLCD.print("Terminado");
  delay(1000); // Muestra el mensaje de finalización
}

